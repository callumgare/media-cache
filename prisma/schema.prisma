// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String
}

model Media {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  title         String?
  description   String?
  fileHash      String?
  draft         Boolean
  sourceDetails SourceMediaDetails[]
  files         File[]
  GroupEntry    GroupEntry[]
}

model SourceMediaDetails {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sourceUploadedAt DateTime?
  title            String?
  description      String?
  url              String?
  creator          String?
  uploader         String?
  views            Int?
  likes            Int?
  likesPercentage  Float?
  dislikes         Int?
  source           Source    @relation(fields: [finderSourceId], references: [finderSourceId])
  finderSourceId   String
  finderMediaId    String
  media            Media     @relation(fields: [mediaId], references: [id])
  mediaId          Int

  @@unique([finderSourceId, mediaId])
  @@unique([finderSourceId, finderMediaId])
}

model File {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  media          Media    @relation(fields: [mediaId], references: [id])
  mediaId        Int
  finderSourceId String
  finderMediaId  String
  type           String
  url            String
  ext            String?
  mimeType       String?
  hasVideo       Boolean?
  hasAudio       Boolean?
  hasImage       Boolean?
  duration       Float?
  fileSize       Int?
  width          Int?
  height         Int?
}

model Source {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  finderSourceId     String               @unique
  SourceMediaDetails SourceMediaDetails[]
}

model Group {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String?
  GroupEntry GroupEntry[]
}

// Ideally this would have single field for groupId/mediaId or failing that
// a postgres check constraint to ensure only one can be set but at the time
// of writing neither are supported by prisma. Also good to have a check to
// make sure only one entry is root, and maybe one to ensure entry is never
// modified (deleting is okay, just no updating)
model GroupEntry {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  parent    GroupEntry?  @relation("GroupEntry", fields: [parentId], references: [id])
  children  GroupEntry[] @relation("GroupEntry")
  parentId  Int?
  group     Group?       @relation(fields: [groupId], references: [id])
  groupId   Int?
  groupName String? // This field is a read-only copy of the name field from the related group and is here to make sure it's unique inside the group
  media     Media?       @relation(fields: [mediaId], references: [id])
  mediaId   Int?

  @@unique([parentId, groupId, mediaId])
  @@unique([parentId, mediaId, groupName])
}

model MediaFinderSettings {
  key       String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Json
}

model MediaFinderQuery {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  title              String
  requestOptions     Json
  schedule           Int
  MediaFinderHistory MediaFinderHistory[]
}

model MediaFinderHistory {
  id                 Int                          @id @default(autoincrement())
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  startDate          DateTime
  endDate            DateTime
  found              Int
  new                Int
  updated            Int
  removed            Int
  notSuitable        Int
  unchanged          Int
  warningCount       Int
  nonFatalErrorCount Int
  fatalErrorCount    Int
  query              MediaFinderQuery             @relation(fields: [queryId], references: [id])
  queryId            Int
  MediaFinderResult  MediaFinderResponseItemMap[]
}

model MediaFinderResponseItemMap {
  id             Int                            @id @default(autoincrement())
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
  source         String
  itemId         String
  itemType       String
  contentHash    String
  content        MediaFinderResponseItemContent @relation(fields: [contentHash], references: [contentHash])
  queryHistory   MediaFinderHistory             @relation(fields: [queryHistoryId], references: [id])
  queryHistoryId Int
}

model MediaFinderResponseItemContent {
  id            Int                          @id @default(autoincrement())
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  source        String
  itemId        String
  itemType      String
  content       Json                         @unique
  contentHash   String                       @unique
  responseItems MediaFinderResponseItemMap[]
}

model MergedMediaIndex {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  currentMediaId  Int
  originalMediaId Int      @unique
}
